<?php

/**
 * @file
 * Provides core <channel> and <item> elements for Views RSS module.
 */

/**
 * Module installation path.
 */
define('VIEWS_RSS_CORE_PATH', drupal_get_path('module', 'views_rss_core'));

/**
 * Include file with all preprocess functions.
 */
include_once VIEWS_RSS_CORE_PATH . '/views_rss_core.inc';

/**
 * Implementation of hook_views_rss_namespaces().
 */
function views_rss_core_views_rss_namespaces() {
  $namespaces['base'] = array(
    'prefix' => 'xml',
    'uri' => trim($GLOBALS['base_url'], '/') . '/',
  );
  $namespaces['atom'] = array(
    'prefix' => 'xmlns',
    'uri' => 'http://www.w3.org/2005/Atom',
  );
  return $namespaces;
}

/**
 * Implements hook_views_rss_channel_elements().
 */
function views_rss_core_views_rss_channel_elements() {
  $elements['title'] = array(
    'configurable' => FALSE,
    'preprocess functions' => array(
      'views_rss_core_preprocess_channel_title',
      'views_rss_htmlspecialchars',
    ),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-title',
  );
  $elements['description'] = array(
    'description' => t('Description for this feed. If left blank, the default site mission will be used.'),
    'settings form' => array('#type' => 'textarea', '#rows' => 3),
    'preprocess functions' => array(
      'views_rss_core_preprocess_channel_description',
      'views_rss_rewrite_relative_paths',
      'views_rss_htmlspecialchars',
    ),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-description',
  );
  $elements['link'] = array(
    'configurable' => FALSE,
    'preprocess functions' => array('views_rss_core_preprocess_channel_link'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-link',
  );
  $elements['atom:link'] = array(
    'configurable' => FALSE,
    'preprocess functions' => array('views_rss_core_preprocess_channel_atom_link'),
    'help' => 'http://www.rssboard.org/rss-profile#namespace-elements-atom-link',
  );
  $elements['language'] = array(
    'description' => t('The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page. See list of <a href="@w3c_url">allowable values</a> for this element defined by the W3C.', array(
      '@w3c_url' => url('http://www.w3.org/TR/REC-html40/struct/dirlang.html', array('fragment' => 'langcodes')),
    )),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-language',
  );
  $elements['category'] = array(
    'description' => t('Specify one or more categories that the channel belongs to. Separate multiple items with comma.'),
    'preprocess functions' => array(
      'views_rss_htmlspecialchars',
      'views_rss_core_preprocess_category',
    ),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-category',
  );
  $elements['image'] = array(
    'description' => t('Path to the image to be used as the artwork for your feed, for example <em>sites/default/files/AllAboutEverything.jpg</em>. Allowed image formats are GIF, JPEG or PNG. Maximum image width is 144 pixels, maximum height 400 pixels.'),
    'preprocess functions' => array('views_rss_core_preprocess_channel_image'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-image',
  );
  $elements['copyright'] = array(
    'description' => t('Copyright notice for content in the channel.'),
    'preprocess functions' => array('views_rss_htmlspecialchars'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-copyright',
  );
  $elements['managingEditor'] = array(
    'description' => t('Email address for person responsible for editorial content.'),
    'preprocess functions' => array('views_rss_htmlspecialchars'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-managingeditor',
  );
  $elements['webMaster'] = array(
    'description' => t('Email address for person responsible for technical issues relating to channel.'),
    'preprocess functions' => array('views_rss_htmlspecialchars'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-webmaster',
  );
  $elements['generator'] = array(
    'description' => t('A string indicating the program used to generate the channel.'),
    'preprocess functions' => array('views_rss_htmlspecialchars'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-generator',
  );
  $elements['docs'] = array(
    'description' => t("A URL that points to the documentation for the format used in the RSS file. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is."),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-docs',
  );
  $elements['cloud'] = array(
    'description' => t("Allows processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds. Example: <em>soap://rpc.sys.com:80/RPC2#pingMe</em>"),
    'preprocess functions' => array('views_rss_core_preprocess_channel_cloud'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-cloud',
  );
  $elements['ttl'] = array(
    'description' => t("ttl stands for time to live. It's a number of minutes that indicates how long a channel can be cached before refreshing from the source."),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-ttl',
  );
  $elements['skipHours'] = array(
    'description' => t('A hint for aggregators telling them which hours they can skip. The hours must be expressed as an integer representing the number of hours since 00:00:00 GMT. Values from 0 to 23 are permitted, with 0 representing midnight. An hour must not be duplicated.'),
    'preprocess functions' => array('views_rss_core_preprocess_channel_skip'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-skiphours',
  );
  $elements['skipDays'] = array(
    'description' => t('A hint for aggregators telling them which days of the week they can skip (up to seven days).'),
    'preprocess functions' => array('views_rss_core_preprocess_channel_skip'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-skipdays',
  );
  $elements['pubDate'] = array(
    'configurable' => FALSE,
    'preprocess functions' => array('views_rss_core_preprocess_channel_date'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-pubdate',
  );
  $elements['lastBuildDate'] = array(
    'configurable' => FALSE,
    'preprocess functions' => array('views_rss_core_preprocess_channel_date'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-lastbuilddate',
  );
  return $elements;
}

/**
 * Implements hook_views_rss_item_elements().
 */
function views_rss_core_views_rss_item_elements() {
  $elements['title'] = array(
    'description' => t('The title of the item. Required by RSS specification.'),
    'preprocess functions' => array('views_rss_htmlspecialchars'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-title',
  );
  $elements['link'] = array(
    'description' => t('The URL of the item. Required by RSS specification.'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-link',
  );
  $elements['description'] = array(
    'description' => t('The item synopsis. Required by RSS specification.'),
    'preprocess functions' => array(
      'views_rss_rewrite_relative_paths',
      'views_rss_htmlspecialchars',
    ),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-description',
  );
  $elements['author'] = array(
    'description' => t('Email address of the author of the item.'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-author',
  );
  $elements['category'] = array(
    'description' => t('Includes the item in one or more categories.'),
    'preprocess functions' => array(
      'views_rss_htmlspecialchars',
      'views_rss_core_preprocess_category',
    ),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-category',
  );
  $elements['comments'] = array(
    'description' => t('URL of a page for comments relating to the item.'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-comments',
  );
  $elements['enclosure'] = array(
    'description' => t('Describes a media object that is attached to the item.'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-enclosure',
  );
  $elements['guid'] = array(
    'description' => t('A string that uniquely identifies the item.'),
    'preprocess functions' => array('views_rss_core_preprocess_item_guid'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-guid',
  );
  $elements['pubDate'] = array(
    'description' => t('Indicates when the item was published.'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-pubdate',
  );
  $elements['source'] = array(
    'configurable' => FALSE,
    'description' => t('The RSS channel that the item came from.'),
    'preprocess functions' => array('views_rss_core_preprocess_item_source'),
    'help' => 'http://www.rssboard.org/rss-profile#element-channel-item-source',
  );
  return $elements;
}

/**
 * Implements hook_views_rss_date_sources().
 */
function views_rss_core_views_rss_date_sources() {
  $sources['node'] = array(
    'pubDate' => array(
      'table' => 'node',
      'field' => 'created',
    ),
    'lastBuildDate' => array(
      'table' => 'node',
      'field' => 'changed',
    ),
  );
  $sources['node_revisions'] = array(
    'pubDate' => array(
      'table' => 'node_revisions',
      'field' => 'timestamp',
    ),
  );
  $sources['comments'] = array(
    'lastBuildDate' => array(
      'table' => 'comments',
      'field' => 'timestamp',
    ),
  );
  $sources['files'] = array(
    'pubDate' => array(
      'table' => 'files',
      'field' => 'timestamp',
    ),
  );
  $sources['users'] = array(
    'pubDate' => array(
      'table' => 'users',
      'field' => 'created',
    ),
  );
  return $sources;
}

/**
 * Implements hook_views_query_alter().
 */
function views_rss_core_views_query_alter(&$view, &$query) {
  if ($view->style_plugin->definition['handler'] == 'views_rss_plugin_style_fields') {
    $date_sources = views_rss_get('date_sources');
    foreach (array_keys($date_sources) as $module) {
      if (isset($date_sources[$module][$view->base_table])) {
        // Select the most recent node creation date for <pubDate> element.
        if (isset($date_sources[$module][$view->base_table]['pubDate'])) {
          $query->fields['pubDate'] = $date_sources[$module][$view->base_table]['pubDate'];
        }
        // Select the most recent node update date for <lastBuildDate> element.
        if (isset($date_sources[$module][$view->base_table]['lastBuildDate'])) {
          $query->fields['lastBuildDate'] = $date_sources[$module][$view->base_table]['lastBuildDate'];
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function views_rss_core_field_formatter_info() {
  $formatters = array(
    // Generic image formatter for <enclosure> element.
    'enclosure_image' => array(
      'label' => t('RSS <enclosure> element'),
      'field types' => array('image'),
    ),
    // Generic file formatter for <enclosure> element.
    'enclosure_file' => array(
      'label' => t('RSS <enclosure> element'),
      'field types' => array('file'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function views_rss_core_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = NULL;

  if ($field['type'] == 'image') {
    $image_styles = image_style_options(FALSE);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function views_rss_code_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($field['type'] == 'image') {
    $image_styles = image_style_options(FALSE);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    // Styles could be lost because of enabled/disabled modules that defines
    // their styles in code.
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * This is a dirty trick here. Essentially, we do not want to call a theme
 * function from here, as it should be called from within a view (amongst
 * other to have $view object in $variables). Therefore here we want to
 * return value only, hence use of array('#markup' => $value). However,
 * in some cases it won't be just a simple string value to return,
 * sometimes we'd want to return an array (for example value with
 * additional arguments) - hence the need to serialize it (plus add
 * "serialized" string at the beginning so that our field preprocess
 * function template_preprocess_views_view_views_rss_field() is able
 * to recognize it as serialized array and treat accordingly.
 *
 * Any better ideas?
 */
function views_rss_core_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = NULL;
  foreach ($items as $delta => $item) {
    // Inside a view item may contain NULL data. In that case, just return.
    if (empty($item['fid'])) {
      unset($items[$delta]);
      continue;
    }
    // Get full image URL based on provided image style.
    if ($field['type'] == 'image' && !empty($display['settings']['image_style']) && $image_style = image_style_load($display['settings']['image_style'])) {
      $uri = image_style_url($display['settings']['image_style'], $item['uri']);
      // Get file size of image preset file (if it has already been created,
      // otherwise just create it first and then get file size).
      $path = image_style_path($display['settings']['image_style'], $item['uri']);
      $real_path = drupal_realpath($path);
      if (file_exists($real_path) || image_style_create_derivative($image_style, $item['uri'], $path)) {
        $item['filesize'] = filesize($real_path);
      }
    }
    else {
      $uri = file_create_url($item['uri']);
    }
    $element[$delta] = array('#markup' => 'serialized:' . serialize(array(
      'arguments' => array(
        'url' => $uri,
        'length' => $item['filesize'],
        'type'   => $item['filemime'],
      ),
    )));
  }
  return $element;
}

/**
 * Implements hook_views_rss_options_form_validate().
 */
function views_rss_core_views_rss_options_form_validate($form, &$form_state) {

  // Validate channel <image> element.
  if (!empty($form_state['values']['style_options']['channel']['core']['views_rss_core']['image'])) {
    // Check that image exists and is in acceptable format.
    $image = image_load($form_state['values']['style_options']['channel']['core']['views_rss_core']['image']);
    if (empty($image)) {
      form_set_error('style_options][channel][core][views_rss_core][image', t('Unable to find %image or incorrect image format.', array(
        '%image' => $form_state['values']['style_options']['channel']['core']['views_rss_core']['image'],
      )));
    }
    else {
      // Check image width.
      if ($image->info['width'] > 144) {
        form_set_error('style_options][channel][core][views_rss_core][image', t("Maximum allowed width of an image for feed channel's &lt;image&gt; element is 144 pixels. Specified %image is !width pixels wide.", array(
          '%image' => $form_state['values']['style_options']['channel']['core']['views_rss_core']['image'],
          '!width' => $image->info['width'],
        )));
      }
      // Check image height.
      if ($image->info['height'] > 400) {
        form_set_error('style_options][channel][core][views_rss_core][image', t("Maximum allowed height of an image for feed channel's &lt;image&gt; element is 400 pixels. Specified %image is !height pixels high.", array(
          '%image' => $form_state['values']['style_options']['channel']['core']['views_rss_core']['image'],
          '!height' => $image->info['height'],
        )));
      }
    }
  }

  // Validate channel <docs> element.
  if (!empty($form_state['values']['style_options']['channel']['core']['views_rss_core']['docs'])) {
    if (!valid_url($form_state['values']['style_options']['channel']['core']['views_rss_core']['docs'], TRUE)) {
      form_set_error('style_options][channel][core][views_rss_core][docs', t("Not a valid URL."));
    }
  }
}
